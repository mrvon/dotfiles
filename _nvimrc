"-------------------------------Path-------------------------------------------
let $MYPATH                                                 ='~/'
let $MYINIT                                                 =$MYPATH.'.config/nvim/init.vim'

"-------------------------------Leader Key-------------------------------------
let mapleader                                               =" "
let maplocalleader                                          =","

"-------------------------------Plugin Package Manager-------------------------
if &compatible
    set nocompatible
endif

call plug#begin('~/.local/share/nvim/plugged')
Plug 'andymass/vim-matchup'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'majutsushi/tagbar'
Plug 'mhinz/vim-signify', {'branch': 'master'}
Plug 'mhinz/vim-startify'
Plug 'mileszs/ack.vim'
Plug 'morhetz/gruvbox'
Plug 'fatih/vim-go', {'do': ':GoInstallBinaries'}
Plug 'mrvon/vim-tomorrow-theme'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'ntpeters/vim-better-whitespace'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-commentary'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'dense-analysis/ale'
Plug 'Raimondi/delimitMate'
Plug 'jsfaint/gen_tags.vim'
" Plug 'christoomey/vim-tmux-navigator'
" Plug 'mattn/emmet-vim', {'for': 'html'}
" Plug 'nathanaelkane/vim-indent-guides'
" Plug 'edkolev/tmuxline.vim'
" Plug 'ap/vim-css-color'
call plug#end()

filetype plugin indent on
syntax enable

"-------------------------------My Color My Taste------------------------------
if $TERMINAL_COLOR == "dark"
    set background                                          =dark
    let $MYCOLOR                                            ='gruvbox'
    let $MYAIR                                              ='gruvbox'
else
    set background                                          =light
    let $MYCOLOR                                            ='Tomorrow'
    let $MYAIR                                              ='tomorrow'
endif
let $MYITALIC                                               =1
colorscheme $MYCOLOR

"-------------------------------Encoding---------------------------------------
" Always use utf-8
set encoding                                                =utf-8
set termencoding                                            =utf-8
set fileencoding                                            =utf-8
set fileencodings                                           =ucs-bom,utf-8,cp936,gb18030,gb2312,big5,default,latin1
set langmenu                                                =en_US.utf-8
set fileformats                                             =unix,dos,mac
language messages                                           en_US.utf-8

" Vim in tmux, clearing uses the current background color
set t_ut=

"-------------------------------Tab Key----------------------------------------
set shiftwidth                                              =4
set tabstop                                                 =4
set softtabstop                                             =0
set shiftround
set expandtab
set backspace                                               =indent,eol,start
set autoindent
set smartindent
set printoptions                                            =paper:a4

"-------------------------------Max History Item-------------------------------
set history                                                 =10000

"-------------------------------Ruler And Statusline---------------------------
set noruler
set laststatus                                              =2
set scrolloff                                               =5

"-------------------------------Magic------------------------------------------
set magic

"-------------------------------Memory Limit Problem---------------------------
" set maxmempattern                                         =1000

"-------------------------------Share Clipboard -------------------------------
set clipboard                                               +=unnamed
set clipboard                                               +=unnamedplus

"-------------------------------Line Space-------------------------------------
set linespace                                               =0

"-------------------------------Highlight Line Under The Cursor----------------
set cursorline
set guicursor                                               =n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor,sm:block-blinkwait175-blinkoff150-blinkon175

"-------------------------------Lazy Redraw------------------------------------
set nolazyredraw

"-------------------------------Display Line Number----------------------------
set number
set relativenumber

"-------------------------------Show Matching Bracets--------------------------
set showmatch

"-------------------------------Highlight Search-------------------------------
" hightlights search results
set hlsearch
" shows search matches as you type
set incsearch

"-------------------------------Wrap Long Line---------------------------------
set nowrap
"set linebreak

"-------------------------------Wrap Scan--------------------------------------
set wrapscan

"-------------------------------Ignore Case And Smart Case---------------------
" if all lowercase, ignore case
set ignorecase
" if caps, watch case
set smartcase

"-------------------------------Long line--------------------------------------
" Always notice you do not write a long line
" Auto break a line
" set textwidth                                             =200
" Show the long line range
set colorcolumn                                             =+1

"-------------------------------Command Wild Menu------------------------------
" You can use Ctrl-d to show wild list
set wildmenu

"-------------------------------gf Search Path---------------------------------
" Search path for gf command
set path                                                    =.,..,,

"-------------------------------Do Not Use Undofile----------------------------
set noundofile

"-------------------------------Allow To bg Unsaved Buffer---------------------
" I prefer use Ctrl-p Ctrl-f to list all buffer
set hidden

"-------------------------------Auto Read -------------------------------------
" Auto read when other program have modified the same file
set autoread
autocmd FocusGained *                                       :checktime

"-------------------------------Number Format----------------------------------
set nrformats                                               =hex

"-------------------------------Disable Fold-----------------------------------
" I don't like vim style fold
set nofoldenable

"-------------------------------Diff Mode--------------------------------------
set diffopt                                                 =filler,vertical

"-------------------------------Disable Swap file------------------------------
set noswapfile

"-------------------------------Disable preview window-------------------------
set completeopt                                             -=preview

"-------------------------------Shows The Effects Of A Command-----------------
" set inccommand                                            =nosplit

"-------------------------------NO BACKUP--------------------------------------
set nobackup
set nowritebackup

"-------------------------------UPDATE TIME------------------------------------
" having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime                                              =300

"-------------------------------Visual Paste Without Overwriting Register------
xnoremap <expr> p 'pgv"'.v:register.'y`>'
xnoremap <expr> P 'Pgv"'.v:register.'y`>'

"-------------------------------Airline----------------------------------------
let g:airline_theme                                         =$MYAIR
let g:airline_detect_modified                               =1
let g:airline_detect_paste                                  =1
let g:airline_detect_crypt                                  =1
let g:airline_detect_spell                                  =1
let g:airline_powerline_fonts                               =1
let g:airline#extensions#tabline#enabled                    =0
let g:airline#extensions#tabline#show_buffers               =1
let g:airline#extensions#tabline#tab_nr_type                =1
let g:airline#extensions#tabline#show_tab_nr                =1
let g:airline#extensions#tabline#formatter                  ='unique_tail'
let g:airline#extensions#tabline#buffer_nr_show             =1
let g:airline#extensions#tabline#buffer_nr_format           ='%s: '
let g:airline#extensions#whitespace#checks                  =[]
let g:airline#extensions#ale#enabled                        =1
let g:airline#extensions#tagbar#enabled                     =0
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
"-------------------------------NERDTree---------------------------------------
nnoremap <localleader>n                                     :NERDTreeToggle<cr>
let NERDTreeAutoCenter                                      =1
let NERDChristmasTree                                       =1
let NERDTreeWinSize                                         =25
"-------------------------------ALE--------------------------------------------
let g:ale_completion_enabled                                =0
let g:ale_lint_on_text_changed                              ='never'
nmap <silent> [s                                            <plug>(ale_previous_wrap)
nmap <silent> ]s                                            <plug>(ale_next_wrap)
let g:ale_linters                                           ={
    \ 'asm': [],
    \ 'go': ['go vet', 'gofmt', 'staticcheck'],
    \ }
let g:ale_fixers                                            ={'python': ['yapf']}
let g:ale_go_staticcheck_lint_package                       =1
let g:ale_go_govet_options                                  ="-composites=false"
if $TERMINAL_COLOR == "dark"
    let g:ale_set_highlights                                =0
else
    let g:ale_set_highlights                                =1
endif
"-----------------------------------------Solarized----------------------------
let g:solarized_termcolors                                  =256
let g:solarized_termtrans                                   =0
let g:solarized_degrade                                     =0
let g:solarized_bold                                        =1
let g:solarized_underline                                   =1
let g:solarized_italic                                      =$MYITALIC
let g:solarized_contrast                                    ="normal"
let g:solarized_visibility                                  ="normal"
let g:solarized_hitrail                                     =0
let g:solarized_menu                                        =1
"-----------------------------------------Indent guides------------------------
let g:indent_guides_enable_on_vim_startup                   =1
let g:indent_guides_default_mapping                         =0
"-----------------------------------------TagBar-------------------------------
nnoremap <localleader>t                                     :TagbarToggle<cr>
"-----------------------------------------Matchup------------------------------
let g:matchup_matchparen_status_offscreen                   =0
"-----------------------------------------Vim-Go--------------------------------
let g:go_bin_path                                           =$GOPATH . "/bin/"
let g:go_fmt_command                                        ="gofmt"
let g:go_def_mode                                           ="godef"
augroup go_shortcut
    autocmd!
    autocmd FileType go nmap <localleader>b  <Plug>(go-build)
    autocmd FileType go nmap <localleader>co <Plug>(go-coverage)
    autocmd FileType go nmap <localleader>cr <Plug>(go-callers)
    autocmd FileType go nmap <localleader>ce <Plug>(go-callees)
    autocmd FileType go nmap <localleader>ds <Plug>(go-def-split)
    autocmd FileType go nmap <localleader>dv <Plug>(go-def-vertical)
    autocmd FileType go nmap <localleader>dt <Plug>(go-def-tab)
    autocmd FileType go nmap <localleader>e  <Plug>(go-rename)
    autocmd FileType go nmap <localleader>i  <Plug>(go-imports)
    autocmd FileType go nmap <localleader>r  <Plug>(go-run)
    autocmd FileType go nmap <localleader>s  <Plug>(go-implements)
    autocmd FileType go nmap <localleader>t  <Plug>(go-test)
augroup END
let g:go_highlight_extra_types                              =1
let g:go_highlight_functions                                =1
let g:go_highlight_function_calls                           =1
let g:go_highlight_types                                    =1
let g:go_highlight_fields                                   =1
let g:go_highlight_operators                                =1
let g:go_highlight_build_constraints                        =1
let g:go_template_autocreate                                =0
let g:go_def_mapping_enabled                                =0
"-----------------------------------------COC----------------------------------
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
"-----------------------------------------Whitespace---------------------------
let g:strip_whitespace_confirm                              =0
"-----------------------------------------Startify-----------------------------
let g:startify_change_to_dir                                =0
"-----------------------------------------ACK----------------------------------
nnoremap <leader>vv                                         :Ack<cr>
if executable('rg')
    let g:ackprg = 'rg -S --vimgrep'
elseif executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif
let g:ackhighlight                                          =1
" solved mix relative and absolute path results problem
autocmd BufAdd * exe "cd" fnameescape(getcwd())
"-----------------------------------------EASY ALIGN---------------------------
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)
"-----------------------------------------FZF----------------------------------
nnoremap <leader>f                                          :Files<cr>
nnoremap <leader>b                                          :Buffer<cr>
nnoremap <leader>r                                          :History<cr>
nnoremap <leader>t                                          :BTags<cr>
nnoremap <leader>o                                          :Tags<cr>
let g:fzf_colors                                            ={
    \ 'fg':      ['fg', 'Normal'],
    \ 'bg':      ['bg', 'Normal'],
    \ 'hl':      ['fg', 'Comment'],
    \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
    \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
    \ 'hl+':     ['fg', 'Statement'],
    \ 'info':    ['fg', 'PreProc'],
    \ 'border':  ['fg', 'Ignore'],
    \ 'prompt':  ['fg', 'Conditional'],
    \ 'pointer': ['fg', 'Exception'],
    \ 'marker':  ['fg', 'Keyword'],
    \ 'spinner': ['fg', 'Label'],
    \ 'header':  ['fg', 'Comment']
    \ }
let g:fzf_layout                                            ={
    \ 'window': { 'width': 0.9, 'height': 0.6 }
    \ }
"-----------------------------------------EMMET--------------------------------
let g:user_emmet_leader_key                                 =','
"-----------------------------------------GenTags------------------------------
let g:loaded_gentags#gtags                                  =1
let g:gen_tags#ctags_opts                                   =[
            \ '--exclude=.ccls-cache',
            \ '--exclude=build',
            \ ]
"-----------------------------------------Mrvon Special Key--------------------
" Thanks to http://learnvimscriptthehardway.stevelosh.com/
" Use jk instead of esc, this excellent idea came from steve.
" inoremap <esc>                                            <nop>
inoremap jk                                                 <esc>
tnoremap jk                                                 <c-\><c-n>
tnoremap <expr> <c-r>                                       '<c-\><c-n>"'.nr2char(getchar()).''
"-----------------------------------------Resize windows-----------------------
nnoremap <up>                                               <c-w>3+
nnoremap <down>                                             <c-w>3-
nnoremap <left>                                             <c-w>3<
nnoremap <right>                                            <c-w>3>
"-----------------------------------------Moving between windows---------------
" origin switch window key-mappings is too hard for me
nnoremap <c-k>                                              <c-w>k
nnoremap <c-j>                                              <c-w>j
nnoremap <c-h>                                              <c-w>h
nnoremap <c-l>                                              <c-w>l

" Does not indent when I input "else" in some filetype. That's a problem in Vim.
" Quickly Auto Indent When leave insert mode
function! QuicklyAutoIndent()
    let l:cursor_position = getpos(".")
    normal! ==
    call setpos(".", l:cursor_position)
endfunction
augroup quickly_indent
    autocmd!
    autocmd InsertLeave *.py,*.lua                          :call QuicklyAutoIndent()
augroup END

" edit the alternate file.
" mostly the alternate file is the previously edited file.
nnoremap <leader><leader>                                   <c-^>

" edit my vimrc
nnoremap <leader>ev                                         :vsplit $MYINIT<cr>

" reload my vimrc
nnoremap <leader>sv                                         :source $MYINIT<cr>

" abbrev
cabbrev  W                                                  w
cabbrev  Q                                                  q
cabbrev  WQ                                                 wq
cabbrev  Wq                                                 wq
cabbrev  QA                                                 qa
cabbrev  Qa                                                 qa

" Y is a strong y, D is a strong d in Vim default setting
" as you can see, a stronger h and a stronger l
nnoremap H                                                  0
vnoremap H                                                  0
nnoremap L                                                  $
vnoremap L                                                  $
" no Ex mode
nnoremap Q                                                  <nop>
" nnoremap J                                                <nop>
" vnoremap J                                                <nop>
" nnoremap K                                                <nop>

" Vimscript file settings
augroup filetype_vim
    autocmd!
    autocmd                                                 FileType vim setlocal foldmethod=marker
augroup END

" Closing last search highlight
nnoremap <leader>h                                          :nohlsearch<cr>

" Filetype alias
" augroup align_filetype_group
"     autocmd!
"     autocmd                                               BufRead,BufNewFile *.txt setlocal filetype=lua
" augroup END

" edit binary using xxd-format!
augroup binary_edit_group
    autocmd!
    autocmd                                                 BufReadPre      *.bin let   &bin=1
    autocmd                                                 BufReadPost     *.bin if    &bin    | %!xxd
    autocmd                                                 BufReadPost     *.bin set   ft=xxd  | endif
    autocmd                                                 BufWritePre     *.bin if    &bin    | %!xxd -r
    autocmd                                                 BufWritePre     *.bin endif
    autocmd                                                 BufWritePost    *.bin if    &bin    | %!xxd
    autocmd                                                 BufWritePost    *.bin set   nomod   | endif
augroup END

" save file with nobomb
augroup save_with_nobomb
    autocmd!
    autocmd                                                 BufWritePre *.lua setlocal nobomb
augroup END

" augroup on_enter_vim
    " autocmd!
    " autocmd VimEnter * NERDTree
    " autocmd VimEnter * nested :TagbarOpen
" augroup END

augroup on_enter_buffer
    autocmd!
    autocmd BufEnter * EnableStripWhitespaceOnSave
    autocmd BufEnter * DisableWhitespace
augroup END

" augroup save_retab
"     autocmd!
"     autocmd                                               BufWritePre * :retab
" augroup END

" Insert current file name
inoremap <localleader>fn                                    <C-R>=expand("%:t")<cr>
cnoremap <localleader>fn                                    <C-R>=expand("%:t")<cr>
inoremap <localleader>fm                                    <C-R>=expand("%:p")<cr>
cnoremap <localleader>fm                                    <C-R>=expand("%:p")<cr>

"------------------------------------------------------------------------------
function! __ExecuteCommand(str)
    exe "menu __magic_menu.__sub_magic_menu :" . a:str
    emenu __magic_menu.__sub_magic_menu
    unmenu __magic_menu
endfunction

function!                                                   __VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]#')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'backward'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'forward'
        execute "normal /" . l:pattern . "^M"
    elseif a:direction == 'ack_smartcase'
        execute __ExecuteCommand("Ack --smart-case " . "\"" . l:pattern . "\"" . "<cr>")
    elseif a:direction == 'ack_wholeword'
        execute __ExecuteCommand("Ack --smart-case -w " . "\"" . l:pattern . "\"" . "<cr>")
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" search in visual mode
vnoremap <silent> *                                         :call __VisualSelection('forward')<cr>:set hlsearch<cr>
vnoremap <silent> #                                         :call __VisualSelection('backward')<cr>:set hlsearch<cr>
vnoremap <leader>vv                                         :call __VisualSelection('ack_smartcase')<cr>
vnoremap <leader>vw                                         :call __VisualSelection('ack_wholeword')<cr>

" get highlight group of cursor word
function! SynStack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
