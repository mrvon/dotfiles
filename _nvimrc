"-------------------------------Path-------------------------------------------
let $MYPATH                                                 ='~/'
let $MYINIT                                                 =$MYPATH.'.config/nvim/init.vim'
let $MYFILE                                                 =$MYPATH.'.vim'

"-------------------------------Leader Key-------------------------------------
let mapleader                                               =" "
let maplocalleader                                          =","

"-------------------------------Plugin Package Manager-------------------------
if &compatible
    set nocompatible
endif
set runtimepath+=$MYFILE/repos/github.com/Shougo/dein.vim/

if dein#load_state($MYFILE)
    call dein#begin($MYFILE)

    call dein#add($MYFILE.'/repos/github.com/Shougo/dein.vim/')
    call dein#add('vim-airline/vim-airline')
    call dein#add('vim-airline/vim-airline-themes')
    call dein#add('scrooloose/nerdtree')
    call dein#add('scrooloose/nerdcommenter')
    call dein#add('w0rp/ale')
    call dein#add('Raimondi/delimitMate')
    call dein#add('mileszs/ack.vim')
    call dein#add('nathanaelkane/vim-indent-guides')
    call dein#add('morhetz/gruvbox')
    call dein#add('mrvon/vim-tomorrow-theme')
    call dein#add('majutsushi/tagbar')
    call dein#add('vim-scripts/matchit.zip')
    call dein#add('godlygeek/tabular')
    call dein#add('tpope/vim-surround')
    call dein#add('tpope/vim-repeat')
    call dein#add('tpope/vim-unimpaired')
    call dein#add('tpope/vim-fugitive')
    call dein#add('mhinz/vim-signify')
    call dein#add('ntpeters/vim-better-whitespace')
    call dein#add('mhinz/vim-startify')
    call dein#add('Valloric/YouCompleteMe')
    call dein#add('rdnetto/YCM-Generator')
    call dein#add('junegunn/fzf', {'build': './install', 'merged': 0})
    call dein#add('junegunn/fzf.vim', {'depends': 'junegunn/fzf'})
    call dein#add('Vimjas/vim-python-pep8-indent', {'on_ft': 'python'})
    call dein#add('mattn/emmet-vim', {'on_ft': 'html'})
    call dein#add('mrvon/vim-go', {'on_ft': 'go'})
    call dein#add('mrvon/vim-erlang-omnicomplete', {'on_ft': 'erlang'})
    " call dein#add('edkolev/tmuxline.vim')
    " call dein#add('altercation/vim-colors-solarized')
    " call dein#add('pangloss/vim-javascript')
    " call dein#add('elixir-lang/vim-elixir')
    " call dein#add('Shougo/deoplete.nvim')
    " call dein#add('zchee/deoplete-go', {'build': 'make'})
    " call dein#add('airblade/vim-gitgutter')
    " call dein#add('ap/vim-css-color')

    call dein#end()
    call dein#save_state()
endif

filetype plugin indent on
syntax enable

"-------------------------------My Color My Taste------------------------------
set background                                              =light
let $MYCOLOR                                                ='Tomorrow'
let $MYAIR                                                  ='tomorrow'
let $MYITALIC                                               =1
colorscheme $MYCOLOR

"-------------------------------Encoding---------------------------------------
" Always use utf-8
set encoding                                                =utf-8
set termencoding                                            =utf-8
set fileencoding                                            =utf-8
set fileencodings                                           =ucs-bom,utf-8,cp936,gb18030,gb2312,big5,default,latin1
set langmenu                                                =en_US.utf-8
set fileformats                                             =unix,dos,mac
language messages                                           en_US.utf-8

" Vim in tmux, clearing uses the current background color
set t_ut=

"-------------------------------Tab Key----------------------------------------
set shiftwidth                                              =4
set tabstop                                                 =4
set softtabstop                                             =0
set shiftround
set expandtab
set backspace                                               =indent,eol,start
set autoindent
set smartindent
set printoptions                                            =paper:a4

"-------------------------------Max History Item-------------------------------
set history                                                 =10000

"-------------------------------Ruler And Statusline---------------------------
set noruler
set laststatus                                              =2
set scrolloff                                               =5

"-------------------------------Magic------------------------------------------
set magic

"-------------------------------Memory Limit Problem---------------------------
set maxmempattern                                           =100

"-------------------------------Share Clipboard -------------------------------
set clipboard                                               +=unnamed
set clipboard                                               +=unnamedplus

"-------------------------------Line Space-------------------------------------
set linespace                                               =0

"-------------------------------Highlight Line Under The Cursor----------------
set cursorline
set guicursor                                               =n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor,sm:block-blinkwait175-blinkoff150-blinkon175

"-------------------------------Lazy Redraw------------------------------------
set nolazyredraw

"-------------------------------Display Line Number----------------------------
set number

"-------------------------------Show Matching Bracets--------------------------
set showmatch

"-------------------------------Highlight Search-------------------------------
" hightlights search results
set hlsearch
" shows search matches as you type
set incsearch

"-------------------------------Wrap Long Line---------------------------------
set nowrap
"set linebreak

"-------------------------------Wrap Scan--------------------------------------
set wrapscan

"-------------------------------Ignore Case And Smart Case---------------------
" if all lowercase, ignore case
set ignorecase
" if caps, watch case
set smartcase

"-------------------------------Long line--------------------------------------
" Always notice you do not write a long line
" Auto break a line
set textwidth                                               =80
" Show the long line range
set colorcolumn                                             =+1

"-------------------------------Command Wild Menu------------------------------
" You can use Ctrl-d to show wild list
set wildmenu

"-------------------------------gf Search Path---------------------------------
" Search path for gf command
set path                                                    =.,..,,

"-------------------------------Do Not Use Undofile----------------------------
set noundofile

"-------------------------------Allow To bg Unsaved Buffer---------------------
" I prefer use Ctrl-p Ctrl-f to list all buffer
set hidden

"-------------------------------Auto Read -------------------------------------
" Auto read when other program have modified the same file
set autoread
autocmd FocusGained *                                       :checktime

"-------------------------------Number Format----------------------------------
set nrformats                                               =hex

"-------------------------------Disable Fold-----------------------------------
" I don't like vim style fold
set nofoldenable

"-------------------------------Diff Mode--------------------------------------
set diffopt                                                 =filler,vertical

"-------------------------------Disable Swap file------------------------------
set noswapfile

"-------------------------------Disable preview window-------------------------
set completeopt                                             -=preview

"-------------------------------Shows The Effects Of A Command-----------------
" set inccommand                                            =nosplit

"-------------------------------My favorite plugin-----------------------------
"-------------------------------Deoplete---------------------------------------
" call deoplete#enable()
"-------------------------------Airline----------------------------------------
let g:airline_theme                                         =$MYAIR
let g:airline_detect_modified                               =1
let g:airline_detect_paste                                  =1
let g:airline_detect_crypt                                  =1
let g:airline_detect_spell                                  =1
let g:airline_powerline_fonts                               =1
let g:airline#extensions#tabline#enabled                    =0
let g:airline#extensions#tabline#show_buffers               =1
let g:airline#extensions#tabline#tab_nr_type                =1
let g:airline#extensions#tabline#show_tab_nr                =1
let g:airline#extensions#tabline#formatter                  ='unique_tail'
let g:airline#extensions#tabline#buffer_nr_show             =1
let g:airline#extensions#tabline#buffer_nr_format           ='%s: '
let g:airline#extensions#whitespace#checks                  =[]
let g:airline#extensions#ale#enabled                        =1
let g:airline#extensions#tagbar#enabled                     =0
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
"-------------------------------NERDTree---------------------------------------
nnoremap <leader>n                                          :NERDTreeToggle<cr>
let NERDTreeAutoCenter                                      =1
let NERDChristmasTree                                       =1
let NERDTreeWinSize                                         =25
"-------------------------------NERDCommenter----------------------------------
let g:NERDCreateDefaultMappings                             =0
let g:NERDSpaceDelims                                       =1
let g:NERDAltDelims_asm                                     =1
" double space issue workaround
let g:NERDCustomDelimiters                                  ={'python': {'left': '#'}}
map <leader>cc                                              <plug>NERDCommenterAlignLeft
map <leader>cs                                              <plug>NERDCommenterSexy
map <leader>cu                                              <plug>NERDCommenterUncomment
"-------------------------------ALE--------------------------------------------
let g:ale_lint_on_text_changed                              ='never'
nmap <silent> [s                                            <plug>(ale_previous_wrap)
nmap <silent> ]s                                            <plug>(ale_next_wrap)
let g:ale_linters                                           ={'asm': []}
let g:ale_fixers                                            ={'python': ['yapf']}
"-------------------------------YCM--------------------------------------------
let g:ycm_confirm_extra_conf                                =0
let g:ycm_key_detailed_diagnostics                          ='<leader>d'
let g:ycm_filetype_blacklist                                ={}
let g:ycm_complete_in_comments                              =1
let g:ycm_complete_in_strings                               =1
let g:ycm_collect_identifiers_from_comments_and_strings     =1
" Use ALE instead of it
let g:ycm_show_diagnostics_ui                               =0
let g:ycm_semantic_triggers                                 ={
    \ 'c' : ['->', '.'],
    \ 'objc' : ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s', 're!\[.*\]\s'],
    \ 'ocaml' : ['.', '#'],
    \ 'cpp,cuda,objcpp' : ['->', '.', '::'],
    \ 'perl' : ['->'],
    \ 'php' : ['->', '::'],
    \ 'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : ['.'],
    \ 'ruby' : ['.', '::'],
    \ 'lua' : ['.', ':'],
    \ 'erlang' : [':'],
    \ }
let g:ycm_python_binary_path                                ='python3'
let g:ycm_server_python_interpreter                         ='python3'
nnoremap <leader>gd                                         :YcmComplete GoTo<cr>
"-----------------------------------------Solarized----------------------------
let g:solarized_termcolors                                  =256
let g:solarized_termtrans                                   =0
let g:solarized_degrade                                     =0
let g:solarized_bold                                        =1
let g:solarized_underline                                   =1
let g:solarized_italic                                      =$MYITALIC
let g:solarized_contrast                                    ="normal"
let g:solarized_visibility                                  ="normal"
let g:solarized_hitrail                                     =0
let g:solarized_menu                                        =1
"-----------------------------------------Indent guides------------------------
let g:indent_guides_enable_on_vim_startup                   =1
let g:indent_guides_default_mapping                         =0
"-----------------------------------------TagBar-------------------------------
nnoremap <leader>t                                          :TagbarToggle<cr>
"-----------------------------------------Vim-Markdown-------------------------
let g:vim_markdown_folding_disabled                         =1
"-----------------------------------------Git----------------------------------
let g:gitgutter_map_keys                                    =0
" nmap [c                                                   <Plug>GitGutterPrevHunk
" nmap ]c                                                   <Plug>GitGutterNextHunk
" nmap <Leader>hs                                           <Plug>GitGutterStageHunk
" nmap <Leader>hr                                           <Plug>GitGutterRevertHunk
" nmap <Leader>hp                                           <Plug>GitGutterPreviewHunk
"-----------------------------------------Vim-Go--------------------------------
let g:go_bin_path                                           =$GOPATH . "/bin/"
let g:go_fmt_command                                        ="gofmt"
let g:go_def_mode                                           ="godef"
augroup go_shortcut
    autocmd!
    autocmd FileType go nmap <localleader>i  <Plug>(go-imports)
    autocmd FileType go nmap <localleader>r  <Plug>(go-run)
    autocmd FileType go nmap <localleader>b  <Plug>(go-build)
    autocmd FileType go nmap <localleader>c  <Plug>(go-coverage)
    autocmd FileType go nmap <localleader>ds <Plug>(go-def-split)
    autocmd FileType go nmap <localleader>dv <Plug>(go-def-vertical)
    autocmd FileType go nmap <localleader>dt <Plug>(go-def-tab)
    autocmd FileType go nmap <localleader>s  <Plug>(go-implements)
    autocmd FileType go nmap <localleader>e  <Plug>(go-rename)
augroup END
let g:go_highlight_functions                                =1
let g:go_highlight_function_calls                           =1
let g:go_highlight_methods                                  =1
let g:go_highlight_fields                                   =1
let g:go_highlight_types                                    =1
let g:go_highlight_operators                                =1
let g:go_highlight_build_constraints                        =1
let g:go_template_autocreate                                =0
"-----------------------------------------Startify-----------------------------
let g:startify_change_to_dir                                =0
"-----------------------------------------ACK----------------------------------
nnoremap <leader>vv                                         :Ack<cr>
if executable('rg')
    let g:ackprg = 'rg --vimgrep'
elseif executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif
let g:ackhighlight                                          =1
" solved mix relative and absolute path results problem
autocmd BufAdd * exe "cd" fnameescape(getcwd())
"-----------------------------------------FZF----------------------------------
nnoremap <leader>f                                          :Files<cr>
nnoremap <leader>b                                          :Buffer<cr>
nnoremap <leader>r                                          :History<cr>
let g:fzf_colors                                            ={
    \ 'fg':      ['fg', 'Normal'],
    \ 'bg':      ['bg', 'Normal'],
    \ 'hl':      ['fg', 'Comment'],
    \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
    \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
    \ 'hl+':     ['fg', 'Statement'],
    \ 'info':    ['fg', 'PreProc'],
    \ 'border':  ['fg', 'Ignore'],
    \ 'prompt':  ['fg', 'Conditional'],
    \ 'pointer': ['fg', 'Exception'],
    \ 'marker':  ['fg', 'Keyword'],
    \ 'spinner': ['fg', 'Label'],
    \ 'header':  ['fg', 'Comment']
    \ }
"-----------------------------------------EMMET--------------------------------
let g:user_emmet_leader_key                                 =','
"-----------------------------------------Mrvon Special Key--------------------
" Thanks to http://learnvimscriptthehardway.stevelosh.com/
" Use jk instead of esc, this excellent idea came from steve.
inoremap jk                                                 <esc>
inoremap <esc>                                              <nop>
tnoremap jk                                                 <c-\><c-n>
tnoremap <expr> <c-r>                                       '<c-\><c-n>"'.nr2char(getchar()).''
"-----------------------------------------Resize windows-----------------------
nnoremap <up>                                               <c-w>3+
nnoremap <down>                                             <c-w>3-
nnoremap <left>                                             <c-w>3<
nnoremap <right>                                            <c-w>3>
"-----------------------------------------Moving between windows---------------
" origin switch window key-mappings is too hard for me
nnoremap <c-k>                                              <c-w>k
nnoremap <c-j>                                              <c-w>j
nnoremap <c-h>                                              <c-w>h
nnoremap <c-l>                                              <c-w>l

" Does not indent when I input "else" in some filetype. That's a problem in Vim.
" Quickly Auto Indent When leave insert mode
function! QuicklyAutoIndent()
    let l:cursor_position = getpos(".")
    normal! ==
    call setpos(".", l:cursor_position)
endfunction
augroup quickly_indent
    autocmd!
    autocmd InsertLeave *.py,*.lua                          :call QuicklyAutoIndent()
augroup END

" edit the alternate file.
" mostly the alternate file is the previously edited file.
nnoremap <leader><leader>                                   <c-^>

" edit my vimrc
nnoremap <leader>ev                                         :vsplit $MYINIT<cr>

" reload my vimrc
nnoremap <leader>sv                                         :source $MYINIT<cr>

" abbrev
cabbrev  W                                                  w
cabbrev  Q                                                  q
cabbrev  WQ                                                 wq
cabbrev  Wq                                                 wq
cabbrev  QA                                                 qa
cabbrev  Qa                                                 qa

" Y is a strong y, D is a strong d in Vim default setting
" as you can see, a stronger h and a stronger l
nnoremap H                                                  0
vnoremap H                                                  0
nnoremap L                                                  $
vnoremap L                                                  $
" nnoremap J                                                <nop>
" vnoremap J                                                <nop>
" nnoremap K                                                <nop>

" Vimscript file settings
augroup filetype_vim
    autocmd!
    autocmd                                                 FileType vim setlocal foldmethod=marker
augroup END

" Match
" nnoremap <leader>w                                          :match Error /\v +$/<cr>
" nnoremap <leader>W                                          :match none<cr>

" Always use Very Magic search
nnoremap /                                                  /\v

" Closing last search highlight
nnoremap <leader>h                                          :nohlsearch<cr>

" Filetype alias
" augroup align_filetype_group
"     autocmd!
"     autocmd                                                 BufRead,BufNewFile *.txt setlocal filetype=lua
" augroup END

" edit binary using xxd-format!
augroup binary_edit_group
    autocmd!
    autocmd                                                 BufReadPre      *.bin let   &bin=1
    autocmd                                                 BufReadPost     *.bin if    &bin    | %!xxd
    autocmd                                                 BufReadPost     *.bin set   ft=xxd  | endif
    autocmd                                                 BufWritePre     *.bin if    &bin    | %!xxd -r
    autocmd                                                 BufWritePre     *.bin endif
    autocmd                                                 BufWritePost    *.bin if    &bin    | %!xxd
    autocmd                                                 BufWritePost    *.bin set   nomod   | endif
augroup END

" save file with nobomb
augroup save_with_nobomb
    autocmd!
    autocmd                                                 BufWritePre *.lua setlocal nobomb
augroup END

" augroup on_enter_vim
    " autocmd!
    " autocmd VimEnter * NERDTree
    " autocmd VimEnter * nested :TagbarOpen
" augroup END

augroup on_enter_buffer
    autocmd!
    autocmd BufEnter * EnableStripWhitespaceOnSave
    autocmd BufEnter * DisableWhitespace
augroup END

" augroup save_retab
"     autocmd!
"     autocmd                                               BufWritePre * :retab
" augroup END

" Insert current file name
" inoremap <localleader>fn                                  <C-R>=expand("%:t")<cr>
" cnoremap <localleader>fn                                  <C-R>=expand("%:t")<cr>
" inoremap <localleader>fm                                  <C-R>=expand("%:p")<cr>
" cnoremap <localleader>fm                                  <C-R>=expand("%:p")<cr>

"------------------------------------------------------------------------------
function! __ExecuteCommand(str)
    exe "menu __magic_menu.__sub_magic_menu :" . a:str
    emenu __magic_menu.__sub_magic_menu
    unmenu __magic_menu
endfunction

function!                                                   __VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]#')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'backward'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'forward'
        execute "normal /" . l:pattern . "^M"
    elseif a:direction == 'ack_smartcase'
        execute __ExecuteCommand("Ack --smart-case " . "\"" . l:pattern . "\"" . "<cr>")
    elseif a:direction == 'ack_wholeword'
        execute __ExecuteCommand("Ack --smart-case -w " . "\"" . l:pattern . "\"" . "<cr>")
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" search in visual mode
vnoremap <silent> *                                         :call __VisualSelection('forward')<cr>:set hlsearch<cr>
vnoremap <silent> #                                         :call __VisualSelection('backward')<cr>:set hlsearch<cr>
vnoremap <leader>vv                                         :call __VisualSelection('ack_smartcase')<cr>
vnoremap <leader>vw                                         :call __VisualSelection('ack_wholeword')<cr>
